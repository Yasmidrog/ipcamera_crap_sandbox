#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cmexpr:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var Mpeg1Muxer, child_process, events, util;

child_process = require('child_process');

util = require('util');

events = require('events');




let tokens=["jopa", "popa"]
let a=[];
var io = require('socket.io')(server);
io.on('connection', function (socket) {

    let stream = child_process.spawn("ffmpeg", [ "-i",
        "http://c-cam.uchicago.edu/mjpg/video.mjpg" ,
        '-vf','spp=6',
        '-f', 'mpeg1video', '-b:v', '2000k', '-r', '20', '-'], {
        detached: false
    });
    stream.stdout.on('data', function(data) {
        if(Math.floor(Math.random()*100) < 0) {
            console.log("Skipping frame");
        } else {
            return socket.emit('VS', data);
        }
    });
    stream.stderr.on('data', function(data) {
        console.log(data.toString());
    });

  /*
   socket.emit("auth");
   socket.on("server_auth", function (data) {
   if(tokens.includes(data.token)){


   }else{
   socket.emit("auth")
   }
   })
   */
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
